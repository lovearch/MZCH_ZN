## 任务1 了解以下动画的作用

taskOpenEnterAnimation
<!--  When opening an activity in a new task, this is the animation that is
run on the activity of the new task (which is entering the screen). -->

taskOpenExitAnimation
<!--  When opening an activity in a new task, this is the animation that is
run on the activity of the old task (which is exiting the screen). -->

taskCloseEnterAnimation
<!--  When closing the current activity, this is the animation that is
run on the next activity (which is entering the screen). -->

taskCloseExitAnimation
<!--  When closing the current activity, this is the animation that is
run on the current activity (which is exiting the screen). -->

taskToFrontEnterAnimation
<!--  When bringing an existing task to the foreground, this is the
animation that is run on the top activity of the task being brought
to the foreground (which is entering the screen). -->

taskToFrontExitAnimation
<!--  When bringing an existing task to the foreground, this is the
animation that is run on the current foreground activity
(which is exiting the screen). -->

taskToBackEnterAnimation
<!--  When sending the current task to the background, this is the
animation that is run on the top activity of the task behind
it (which is entering the screen). -->

taskToBackExitAnimation
<!--  When sending the current task to the background, this is the
animation that is run on the top activity of the current task
(which is exiting the screen). -->

taskOpenEnterAnimation
<!--  When opening an activity in a new task, this is the animation that is
run on the activity of the new task (which is entering the screen). -->

## Activity动画的所有方式
<!-- Standard animations for a full-screen window or activity. -->
7    <style name="Animation.Activity" parent="android:style/Animation">
8        <item name="android:activityOpenEnterAnimation">@flyme:anim/mz_activity_to_next_open_enter</item>
9        <item name="android:activityOpenExitAnimation">@flyme:anim/mz_activity_to_next_open_exit</item>
10        <item name="android:activityCloseEnterAnimation">@flyme:anim/mz_activity_to_next_close_enter</item>
11        <item name="android:activityCloseExitAnimation">@flyme:anim/mz_activity_to_next_close_exit</item>
12        <item name="android:taskOpenEnterAnimation">@flyme:anim/mz_new_app_to_next_open_enter</item>
13        <item name="android:taskOpenExitAnimation">@flyme:anim/mz_new_app_to_next_open_exit</item>
14        <item name="android:taskCloseEnterAnimation">@flyme:anim/mz_new_app_to_next_close_enter</item>
15        <item name="android:taskCloseExitAnimation">@flyme:anim/mz_new_app_to_next_close_exit</item>
16        <item name="android:taskToFrontEnterAnimation">@flyme:anim/mz_new_app_to_next_open_enter</item>
17        <item name="android:taskToFrontExitAnimation">@flyme:anim/mz_new_app_to_next_open_exit</item>
18        <item name="android:taskToBackEnterAnimation">@flyme:anim/mz_new_app_to_next_close_enter</item>
19        <item name="android:taskToBackExitAnimation">@flyme:anim/mz_new_app_to_next_close_exit</item>
20        <item name="android:wallpaperOpenEnterAnimation">@flyme:anim/mz_wallpaper_close_enter</item>
21        <item name="android:wallpaperOpenExitAnimation">@flyme:anim/mz_wallpaper_close_exit</item>
22        <item name="android:wallpaperCloseEnterAnimation">@flyme:anim/mz_wallpaper_open_enter</item>
23        <item name="android:wallpaperCloseExitAnimation">@flyme:anim/mz_wallpaper_open_exit</item>
24        <item name="android:fragmentOpenEnterAnimation">@flyme:animator/mz_fragment_open_enter</item>
25        <item name="android:fragmentOpenExitAnimation">@flyme:animator/mz_fragment_open_exit</item>
26        <item name="android:fragmentCloseEnterAnimation">@flyme:animator/mz_fragment_close_enter</item>
27        <item name="android:fragmentCloseExitAnimation">@flyme:animator/mz_fragment_close_exit</item>
28    </style>


目前动画的修改是在这个路径下面的文件中:
/M80_base/flyme/frameworks/flyme-res/res-sdk/anim/
修改目前flyme系统动画是修改这个文件中对应的xml文件

AppTransition.java

//FLYME:zhangxin@SDK.Feature add for overlay "Animation.Activity" {@
1380    private SparseIntArray mAnimArray = null;
1381    private int mzOverlayAnim(int id) {
1382        if (mAnimArray == null) {
1383            mAnimArray = new SparseIntArray(12);
1384            Resources res = Resources.getSystem();
1385            if (res == null) {
1386                return id;
1387            }
1388            mAnimArray.put(res.getIdentifier("activity_open_enter", "anim", "android"),
1389                    com.flyme.internal.R.anim.mz_activity_to_next_open_enter);
1390            mAnimArray.put(res.getIdentifier("activity_open_exit", "anim", "android"),
1391                    com.flyme.internal.R.anim.mz_activity_to_next_open_exit);
1392            mAnimArray.put(res.getIdentifier("activity_close_enter", "anim", "android"),
1393                    com.flyme.internal.R.anim.mz_activity_to_next_close_enter);
1394            mAnimArray.put(res.getIdentifier("activity_close_exit", "anim", "android"),
1395                    com.flyme.internal.R.anim.mz_activity_to_next_close_exit);
1396
1397            mAnimArray.put(res.getIdentifier("task_open_enter", "anim", "android"),
1398                    com.flyme.internal.R.anim.mz_new_app_to_next_open_enter);
1399            mAnimArray.put(res.getIdentifier("task_open_exit", "anim", "android"),
1400                    com.flyme.internal.R.anim.mz_new_app_to_next_open_exit);
1401            mAnimArray.put(res.getIdentifier("task_close_enter", "anim", "android"),
1402                    com.flyme.internal.R.anim.mz_new_app_to_next_close_enter);
1403            mAnimArray.put(res.getIdentifier("task_close_exit", "anim", "android"),
1404                    com.flyme.internal.R.anim.mz_new_app_to_next_close_exit);
1405
1406            mAnimArray.put(res.getIdentifier("wallpaper_open_enter", "anim", "android"),
1407                    com.flyme.internal.R.anim.mz_wallpaper_close_enter);
1408            mAnimArray.put(res.getIdentifier("wallpaper_open_exit", "anim", "android"),
1409                    com.flyme.internal.R.anim.mz_wallpaper_close_exit);
1410            mAnimArray.put(res.getIdentifier("wallpaper_close_enter", "anim", "android"),
1411                    com.flyme.internal.R.anim.mz_wallpaper_open_enter);
1412            mAnimArray.put(res.getIdentifier("wallpaper_close_exit", "anim", "android"),
1413                    com.flyme.internal.R.anim.mz_wallpaper_open_exit);
1414        }
1415        int overlayId = mAnimArray.get(id);
1416        if (DEBUG_ANIM) {
1417            Slog.i(TAG, " id = " + Integer.toHexString(id) + " overlayId = " + Integer.toHexString(overlayId));
1418        }
1419        if (overlayId > 0) {
1420            return overlayId;
1421        } else {
1422            return id;
1423        }
1424    }
1425    //@}


Animation loadAnimationAttr(WindowManager.LayoutParams lp, int animAttr) {
412        int anim = 0;
413        Context context = mContext;
414        if (animAttr >= 0) {
415            AttributeCache.Entry ent = getCachedAnimations(lp);
416            if (ent != null) {
417                context = ent.context;
418                anim = ent.array.getResourceId(animAttr, 0);
419            }
420        }
421        //FLYME:zhangxin@SDK.Feature{@
422        anim = mzOverlayAnim(anim);
423        //@}
424        if (anim != 0) {
425            return AnimationUtils.loadAnimation(context, anim);
426        }
427        return null;
428    }
429
430    Animation loadAnimationRes(WindowManager.LayoutParams lp, int resId) {
431        Context context = mContext;
432        if (resId >= 0) {
433            AttributeCache.Entry ent = getCachedAnimations(lp);
434            if (ent != null) {
435                context = ent.context;
436            }
437            //FLYME:zhangxin@SDK.Feature{@
438            resId = mzOverlayAnim(resId);
439            //@}
440            return AnimationUtils.loadAnimation(context, resId);
441        }
442        return null;
443    }
444
445    private Animation loadAnimationRes(String packageName, int resId) {
446        int anim = 0;
447        Context context = mContext;
448        if (resId >= 0) {
449            AttributeCache.Entry ent = getCachedAnimations(packageName, resId);
450            if (ent != null) {
451                context = ent.context;
452                anim = resId;
453            }
454        }
455        //FLYME:zhangxin@SDK.Feature{@
456        anim = mzOverlayAnim(anim);
457        //@}
458        if (anim != 0) {
459            return AnimationUtils.loadAnimation(context, anim);
460        }
461        return null;
462    }
463

## 任务2  task跟Activity launchmode activityOption关联
launchMode在多个Activity跳转的过程中扮演着重要的角色，它可以决定是否生成新的Activity实例，
是否重用已存在的Activity实例，是否和其他Activity实例公用一个task里。这里简单介绍一下task的概念，
task是一个具有栈结构的对象，一个task可以管理多个Activity，启动一个应用，也就创建一个与之对应的task。
Activity一共有以下四种launchMode：
1.standard
2.singleTop
3.singleTask
4.singleInstance
可以在AndroidManifest.xml配置<activity>的Android:launchMode属性为以上四种之一.


1. standard启动模式

![1]
每次跳转系统都会在task中生成一个新的FirstActivity实例，并且放于栈结构的顶部，当我们按下后退键时，才能看到原来的FirstActivity实例。
standard启动模式，不管有没有已存在的实例，都生成新的实例。

2. singleTop启动模式
![2]
跳转时系统会先在栈结构中寻找是否有一个FirstActivity实例正位于栈顶，
如果有则不再生成新的，而是直接使用。
当从FirstActivity跳转到SecondActivity,再从SecondActivity跳转到FirstActivity时,第二次
跳转时由于FirstActivity不是位于task的顶部就会重新生成一个FirstActivity的实例.

3 singleTask启动模式
![3]
在图中的下半部分是SecondActivity跳转到FirstActivity后的栈结构变化的结果，
SecondActivity消失了，在这个跳转过程中系统发现有存在的FirstActivity实例，
于是不再生成新的实例，而是将FirstActivity之上的Activity实例统统出栈，
将FirstActivity变为栈顶对象，显示到幕前。

4. singleInstance
![4]
FirstActivity启动模式是standard, SecondActivity启动模式是singleInstance
从FirstActivity跳转到SecondActivity时，重新启用了一个新的栈结构，来放置SecondActivity实例，
然后按下后退键，再次回到原始栈结构；
图中下半部分显示的在SecondActivity中再次跳转到FirstActivity，
这个时候系统会在原始栈结构中生成一个FirstActivity实例，然后回退两次，
注意，并没有退出，而是回到了SecondActivity，为什么呢？
是因为从SecondActivity跳转到FirstActivity的时候，起点变成了SecondActivity实例所在的栈结构，
这样一来，需要“回归”到这个栈结构。


深入了解各种启动模式的文档 http://blog.csdn.net/guoqifa29/article/details/44004489
### ActivityOptions
ActivityOptions








参考文档 http://blog.csdn.net/liuhe688/article/details/6754323/

[1]: /root/AtomFolder/系统动画学习/文档所需图片/standard启动模式.png
[2]: /root/AtomFolder/系统动画学习/文档所需图片/singleTop启动模式.png
[3]: /root/AtomFolder/系统动画学习/文档所需图片/singleTask启动模式.png
[3]: /root/AtomFolder/系统动画学习/文档所需图片/singleInstance启动模式.png
